"use client";

import useSWR from "swr";
import { fetcher } from "@/lib/fetcher";
import { type Item } from "@/lib/api";
import { useFilterStore } from "@/store/filterStore";

// üîÑ CÎ≤à Î¨∏Ï†ú Ìï¥Í≤∞: ÏÑúÎ≤Ñ Ï†ïÎ†¨ Í≤ÄÏ¶ù Ìï®Ïàò
function checkIfSorted(
  items: any[],
  sortBy: string,
  sortOrder: string
): boolean {
  if (items.length < 2) return true;

  for (let i = 0; i < items.length - 1; i++) {
    const current = getSortValue(items[i], sortBy);
    const next = getSortValue(items[i + 1], sortBy);

    if (sortOrder === "asc") {
      if (current > next) {
        console.log(
          `‚ö†Ô∏è [Sort] Ï†ïÎ†¨ Í≤ÄÏ¶ù Ïã§Ìå®: ${current} > ${next} (${sortBy} asc)`
        );
        return false;
      }
    } else if (sortOrder === "desc") {
      if (current < next) {
        console.log(
          `‚ö†Ô∏è [Sort] Ï†ïÎ†¨ Í≤ÄÏ¶ù Ïã§Ìå®: ${current} < ${next} (${sortBy} desc)`
        );
        return false;
      }
    }
  }

  return true;
}

// üîÑ CÎ≤à Î¨∏Ï†ú Ìï¥Í≤∞: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ï†ïÎ†¨ Ìï®Ïàò
function clientSideSort(
  items: any[],
  sortBy: string,
  sortOrder: string
): any[] {
  return [...items].sort((a, b) => {
    const aVal = getSortValue(a, sortBy);
    const bVal = getSortValue(b, sortBy);

    let comparison = 0;
    if (aVal > bVal) comparison = 1;
    if (aVal < bVal) comparison = -1;

    return sortOrder === "desc" ? -comparison : comparison;
  });
}

// üîÑ Ï†ïÎ†¨ Í∞í Ï∂îÏ∂ú Ìï®Ïàò (ÌÉÄÏûÖÎ≥Ñ Ï†ÅÏ†àÌïú Î≥ÄÌôò)
function getSortValue(item: any, sortBy: string): any {
  // üéØ computed field: calculated_ratio (ÏµúÏ†ÄÍ∞Ä/Í≥µÏãúÍ∞ÄÍ≤©)
  if (sortBy === "calculated_ratio") {
    const minBid = parseFloat(item.minimum_bid_price) || 0;
    const publicPrice = parseFloat(item.public_price) || 0;

    if (publicPrice === 0 || isNaN(publicPrice) || isNaN(minBid)) {
      return 999999; // Í≥ÑÏÇ∞ Î∂àÍ∞ÄÎä•Ìïú Í∞íÏùÄ Îß® Îí§Î°ú
    }

    return minBid / publicPrice;
  }

  const value = item[sortBy];

  // Ïà´ÏûêÌòï Ïª¨ÎüºÎì§
  if (
    [
      "appraised_value",
      "minimum_bid_price",
      "building_area_pyeong",
      "land_area_pyeong",
      "construction_year",
      "public_price",
    ].includes(sortBy)
  ) {
    return parseFloat(value) || 0;
  }

  // Î¨∏ÏûêÌòï Ïª¨ÎüºÎì§
  return String(value || "").toLowerCase();
}

export interface UseItemsResult {
  items: Item[] | undefined;
  isLoading: boolean;
  error: any;
  totalCount?: number;
  usageValues: string[]; // üè¢ ÎèôÏ†Å Í±¥Î¨º Ïú†Ìòï ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ±Ïö©
  floorValues: string[]; // üè¢ ÎèôÏ†Å Ï∏µÌôïÏù∏ ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ±Ïö©
  refetch: () => void;
  isRefreshing: boolean;
}

function buildQueryParamsFromFilters(
  filters: ReturnType<typeof useFilterStore.getState>
) {
  const params: Record<string, any> = {};

  // üö® ÌïµÏã¨ ÏàòÏ†ï: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨Í∞Ä ÌïÑÏöîÌïú Î™®Îì† Í≤ΩÏö∞ ÌÜµÌï©
  const needsClientProcessing =
    (filters.floorConfirmation && filters.floorConfirmation !== "all") ||
    (filters.hasElevator && filters.hasElevator !== "all") ||
    (filters.sortBy && filters.sortOrder); // üéØ Ï†ïÎ†¨ÎèÑ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨Ïóê Ìè¨Ìï®

  if (needsClientProcessing) {
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨Í∞Ä ÌïÑÏöîÌïòÎ©¥ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò®Îã§
    params.limit = 1000; // Î∞±ÏóîÎìúÍ∞Ä ÏßÄÏõêÌïòÎäî Î≤îÏúÑÎ°ú Ï°∞Ï†ï
    params.page = 1;
    console.log(
      "üö® [Debug] ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ Í∞êÏßÄ (ÌïÑÌÑ∞ÎßÅ/Ï†ïÎ†¨) - Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î™®Îìú"
    );
  } else {
    // ÏùºÎ∞òÏ†ÅÏù∏ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
    params.limit = filters.size ?? 20;
    params.page = filters.page ?? 1;
  }

  // ‚úÖ ÏßÄÏó≠ (ÏΩîÎìú Í∏∞Î∞ò - Î∞±ÏóîÎìú Í∞ÄÏù¥Îìú 3-1)
  if (filters.sido_code) params.sido_code = filters.sido_code;
  if (filters.city_code) params.city_code = filters.city_code;
  if (filters.town_code) params.town_code = filters.town_code;

  // ÌïòÏúÑÌò∏ÌôòÏö© Ïù¥Î¶Ñ Í∏∞Î∞ò (Î∞±ÏóîÎìúÏóêÏÑú ÏßÄÏõê)
  if (!filters.sido_code && filters.province)
    params.province = filters.province;
  if (!filters.city_code && filters.cityDistrict)
    params.cityDistrict = filters.cityDistrict;
  if (!filters.town_code && filters.town) params.town = filters.town;
  if (filters.region) params.region = filters.region;

  // ‚úÖ Í±¥Î¨º Ïú†Ìòï (Î∞±ÏóîÎìú Í∞ÄÏù¥Îìú: buildingType ‚Üí usage)
  if (filters.buildingType && filters.buildingType !== "all") {
    params.usage = filters.buildingType;
  }

  // ‚ùå Ìé∏ÏùòÏãúÏÑ§ (Î∞±ÏóîÎìúÏóêÏÑú Ïã§Ï†ú ÌïÑÌÑ∞ÎßÅÏù¥ ÏûëÎèôÌïòÏßÄ ÏïäÏïÑ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÎ°ú Î≥ÄÍ≤Ω)
  // if (filters.hasElevator && filters.hasElevator !== "all") {
  //   params.hasElevator = filters.hasElevator === "ÏûàÏùå" ? true : false;
  // }
  // ‚ùå hasParking Ï†úÍ±∞ (Î∞±ÏóîÎìú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå)

  // ‚ùå Ï∏µÌôïÏù∏ ÌïÑÌÑ∞ - Î∞±ÏóîÎìú ÎØ∏ÏßÄÏõêÏúºÎ°ú ÏÑúÎ≤Ñ ÏöîÏ≤≠ÏóêÏÑú Ï†úÍ±∞
  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑú Ï≤òÎ¶¨ÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
  // if (filters.floorConfirmation && filters.floorConfirmation !== "all") {
  //   params.floor_confirmation = filters.floorConfirmation;
  // }

  // üîÑ Í∏∞Ï°¥ Ï∏µÏàò ÌïÑÌÑ∞ (ÌïòÏúÑÌò∏Ìôò Ïú†ÏßÄ)
  if (filters.floor && filters.floor !== "all") {
    params.floor = filters.floor;
  }

  // üîç ÌÇ§ÏõåÎìú Í≤ÄÏÉâ (Í≤ÄÏÉâ ÌïÑÎìú ÏÑ†ÌÉù ÏßÄÏõê)
  if (filters.searchQuery && filters.searchQuery.trim()) {
    const searchQuery = filters.searchQuery.trim();
    const searchField = filters.searchField || "all";

    switch (searchField) {
      case "case_number":
        params.search_case_number = searchQuery;
        break;
      case "road_address":
        params.search_road_address = searchQuery;
        break;
      case "all":
      default:
        params.search = searchQuery;
        break;
    }

    console.log(
      `üîç [Debug] ÌÇ§ÏõåÎìú Í≤ÄÏÉâ: "${searchQuery}" (${searchField} ÌïÑÎìú)`
    );
  }

  // üîÑ ÏÑúÎ≤Ñ ÏÇ¨Ïù¥Îìú Ï†ïÎ†¨ (Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Í∏∞Ï§Ä Ï†ïÎ†¨)
  if (filters.sortBy && filters.sortOrder) {
    params.sortBy = filters.sortBy;
    params.sortOrder = filters.sortOrder;
    console.log(
      `üîÑ [Debug] ÏÑúÎ≤Ñ ÏÇ¨Ïù¥Îìú Ï†ïÎ†¨: ${filters.sortBy} ${filters.sortOrder}`
    );
  }

  // ‚ùå Í≤ΩÎß§ÏÉÅÌÉú (ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠Ïóê ÏùòÌï¥ ÎπÑÌôúÏÑ±Ìôî)
  // if (filters.auctionStatus && filters.auctionStatus !== "all") {
  //   params.currentStatus = filters.auctionStatus;
  // }

  // ‚úÖ Í∞ÄÍ≤© Î≤îÏúÑ (camelCase - Î∞±ÏóîÎìú Í∞ÄÏù¥Îìú 3-1: minPrice/maxPrice)
  const [minPrice, maxPrice] = filters.priceRange;
  if (minPrice && minPrice > 0) params.minPrice = minPrice;
  if (maxPrice && maxPrice < 500000) params.maxPrice = maxPrice;

  // ‚úÖ Î©¥Ï†Å Î≤îÏúÑ (ÌïòÏúÑÌò∏ÌôòÏö©) - deprecated, ÏÉàÎ°úÏö¥ Î∂ÑÎ¶¨Îêú Î©¥Ï†Å ÌïÑÌÑ∞ ÏÇ¨Ïö© Í∂åÏû•
  const [minArea, maxArea] = filters.areaRange;
  if (minArea && minArea > 0) params.minArea = minArea;
  if (maxArea && maxArea < 200) params.maxArea = maxArea;

  // üèóÔ∏è Í±¥Ï∂ïÎ©¥Ï†Å Î≤îÏúÑ (Ìèâ Îã®ÏúÑ)
  const [minBuildingArea, maxBuildingArea] = filters.buildingAreaRange;
  if (minBuildingArea && minBuildingArea > 0)
    params.minBuildingArea = minBuildingArea;
  if (maxBuildingArea && maxBuildingArea < 100)
    params.maxBuildingArea = maxBuildingArea;

  // üåç ÌÜ†ÏßÄÎ©¥Ï†Å Î≤îÏúÑ (Ìèâ Îã®ÏúÑ)
  const [minLandArea, maxLandArea] = filters.landAreaRange;
  if (minLandArea && minLandArea > 0) params.minLandArea = minLandArea;
  if (maxLandArea && maxLandArea < 200) params.maxLandArea = maxLandArea;

  // ‚úÖ Í±¥Ï∂ïÎÖÑÎèÑ (Î∞±ÏóîÎìú Í∞ÄÏù¥Îìú: minBuildYear/maxBuildYear ‚Üí minYearBuilt/maxYearBuilt)
  const [minYear, maxYear] = filters.buildYear;
  if (minYear && minYear > 1980) params.minYearBuilt = minYear;
  if (maxYear && maxYear < 2024) params.maxYearBuilt = maxYear;

  // ‚úÖ Îß§Í∞ÅÍ∏∞Ïùº (Î∞±ÏóîÎìú Í∞ÄÏù¥Îìú 3-1)
  if (filters.auctionDateFrom) params.auctionDateFrom = filters.auctionDateFrom;
  if (filters.auctionDateTo) params.auctionDateTo = filters.auctionDateTo;

  // ÌïòÏúÑÌò∏Ìôò (Í∏∞Ï°¥ ÏΩîÎìú)
  if (filters.auctionMonth) params.auction_month = filters.auctionMonth;

  // 1Ïñµ Ïù¥Ìïò Ïó¨Î∂Ä (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
  if (filters.under100) {
    params.maxPrice = Math.min(params.maxPrice ?? 10000, 10000);
  }

  return params;
}

export function useItems(): UseItemsResult {
  const filters = useFilterStore();

  // üö® ÏßÄÏó≠ ÏÑ†ÌÉù ÌïÑÏàò Ï°∞Í±¥ ÌôïÏù∏ (ÏÑ±Îä• ÏµúÏ†ÅÌôî) - ÏãúÎèÑÎ™ÖÍ≥º ÏãúÍµ∞Íµ¨ Î™®Îëê ÌïÑÏöî
  const hasLocationSelected = Boolean(filters.province && filters.cityDistrict);

  // üéâ /custom API ÏÇ¨Ïö© (16Í∞ú Ïª¨Îüº ÏÑ†ÌÉù + Î™®Îì† ÌïÑÌÑ∞ÎßÅ ÏôÑÏ†Ñ ÏßÄÏõê ÌôïÏù∏!)
  const requiredFields = [
    "id",
    "usage",
    "case_number",
    "road_address",
    "building_area_pyeong",
    "land_area_pyeong",
    "appraised_value",
    "minimum_bid_price",
    "bid_to_appraised_ratio",
    "public_price",
    "sale_month",
    "special_rights",
    "floor_confirmation",
    "under_100million",
    "construction_year",
    "elevator_available",
  ].join(",");

  // üö® ÌïµÏã¨ ÏàòÏ†ï: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ ÌôúÏÑ±Ìôî Ïó¨Î∂Ä ÌôïÏù∏ (ÌïÑÌÑ∞ÎßÅ + Ï†ïÎ†¨)
  const needsClientProcessing =
    (filters.floorConfirmation && filters.floorConfirmation !== "all") ||
    (filters.hasElevator && filters.hasElevator !== "all") ||
    (filters.sortBy && filters.sortOrder);

  const allParams = {
    ...buildQueryParamsFromFilters(filters),
    fields: requiredFields,
  };

  // üéØ ÌïµÏã¨ ÏàòÏ†ï: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨Í∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const swrKey = hasLocationSelected
    ? needsClientProcessing
      ? [
          "/api/v1/items/custom",
          {
            ...allParams,
            page: 1, // ÌéòÏù¥ÏßÄÎäî 1Î°ú Í≥†Ï†ïÌïòÏó¨ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            limit: 1000, // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
          },
        ]
      : ["/api/v1/items/custom", allParams] // ÏùºÎ∞ò Î™®Îìú: ÏÑúÎ≤Ñ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
    : null;

  // üîç ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ - ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î∞è SWR ÌÇ§ ÌôïÏù∏
  if (hasLocationSelected) {
    console.log(
      `üîç [Debug] üìÑ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò: ${filters.page}ÌéòÏù¥ÏßÄ, ${filters.size}Í∞úÏî©`
    );
    console.log("üîç [Debug] ÌïÑÌÑ∞ ÌååÎùºÎØ∏ÌÑ∞:", allParams);
    console.log("üîç [Debug] floorConfirmation Í∞í:", filters.floorConfirmation);
    console.log("üîç [Debug] hasElevator Í∞í:", filters.hasElevator);
    console.log("üîç [Debug] buildingType Í∞í:", filters.buildingType);
    console.log("üö® [Debug] ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ ÌôúÏÑ±Ìôî:", needsClientProcessing);
    console.log("üîë [Debug] SWR ÌÇ§:", swrKey);
  } else {
    console.log("üö® [Debug] ÏßÄÏó≠Ïù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïÑÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ëÏßÄ");
  }

  // üéØ ÏßÄÏó≠ ÏÑ†ÌÉùÎêú Í≤ΩÏö∞ÏóêÎßå API Ìò∏Ï∂ú (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
  const { data, error, isLoading, isValidating, mutate } = useSWR(
    swrKey,
    fetcher
  );

  // üö® ÏßÄÏó≠ ÎØ∏ÏÑ†ÌÉù Ïãú Îπà Îç∞Ïù¥ÌÑ∞ Î∞òÌôò (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
  if (!hasLocationSelected) {
    return {
      items: [],
      isLoading: false,
      error: null,
      totalCount: 0,
      usageValues: [],
      floorValues: [],
      refetch: () => {},
      isRefreshing: false,
    };
  }

  // üîç Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏ Î∞è ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú ÌïÑÌÑ∞ÎßÅ
  let items = (data as any)?.items ?? (data as any) ?? [];
  let originalTotalCount =
    (data as any)?.total_items ??
    (data as any)?.totalItems ??
    (data as any)?.total ??
    (data as any)?.count ??
    0;

  // üéØ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ï∏µÌôïÏù∏ ÌïÑÌÑ∞ÎßÅ (Î∞±ÏóîÎìú ÎØ∏ÏßÄÏõêÏúºÎ°ú)
  if (
    filters.floorConfirmation &&
    filters.floorConfirmation !== "all" &&
    items.length > 0
  ) {
    console.log(
      "üîç [Debug] Ï∏µÌôïÏù∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌïÑÌÑ∞ Ï†ÅÏö©:",
      filters.floorConfirmation
    );
    console.log("üîç [Debug] ÌïÑÌÑ∞ÎßÅ Ï†Ñ ÏïÑÏù¥ÌÖú Ïàò:", items.length);

    items = items.filter((item: any) => {
      const floorValue = item.floor_confirmation;
      console.log(
        "üîç [Debug] ÏïÑÏù¥ÌÖú Ï∏µÌôïÏù∏ Í∞í:",
        floorValue,
        "vs ÌïÑÌÑ∞:",
        filters.floorConfirmation
      );
      return floorValue === filters.floorConfirmation;
    });

    console.log("üîç [Debug] ÌïÑÌÑ∞ÎßÅ ÌõÑ ÏïÑÏù¥ÌÖú Ïàò:", items.length);
  }

  // üéØ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ (Î∞±ÏóîÎìú ÌïÑÌÑ∞ÎßÅ ÎØ∏ÏûëÎèôÏúºÎ°ú)
  if (
    filters.hasElevator &&
    filters.hasElevator !== "all" &&
    items.length > 0
  ) {
    console.log(
      "üîç [Debug] ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌïÑÌÑ∞ Ï†ÅÏö©:",
      filters.hasElevator
    );
    console.log("üîç [Debug] ÌïÑÌÑ∞ÎßÅ Ï†Ñ ÏïÑÏù¥ÌÖú Ïàò:", items.length);

    items = items.filter((item: any) => {
      const elevatorValue = item.elevator_available;
      const hasElevator = elevatorValue === "O" || elevatorValue === "Y";

      console.log(
        "üîç [Debug] ÏïÑÏù¥ÌÖú ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ Í∞í:",
        elevatorValue,
        "‚Üí",
        hasElevator ? "ÏûàÏùå" : "ÏóÜÏùå",
        "vs ÌïÑÌÑ∞:",
        filters.hasElevator
      );

      if (filters.hasElevator === "ÏûàÏùå") {
        return hasElevator;
      } else if (filters.hasElevator === "ÏóÜÏùå") {
        return !hasElevator;
      }
      return true;
    });

    console.log("üîç [Debug] ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ ÌõÑ ÏïÑÏù¥ÌÖú Ïàò:", items.length);
  }

  // üö® ÌïµÏã¨ ÏàòÏ†ï: Ï†ïÎ†¨ Î°úÏßÅ Îã®ÏàúÌôî
  // Ï†ïÎ†¨Ïù¥ ÌôúÏÑ±ÌôîÎêòÎ©¥ Î¨¥Ï°∞Í±¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ï†ïÎ†¨ (Ï†ÑÏó≠ Ï†ïÎ†¨ Î≥¥Ïû•)
  if (filters.sortBy && filters.sortOrder && items.length > 1) {
    console.log(
      `üîÑ [Sort] ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†ÑÏó≠ Ï†ïÎ†¨ Ï†ÅÏö©: ${filters.sortBy} ${filters.sortOrder} (${items.length}Í±¥ Îç∞Ïù¥ÌÑ∞)`
    );
    items = clientSideSort(items, filters.sortBy, filters.sortOrder);
    console.log(
      `‚úÖ [Sort] Ï†ÑÏó≠ Ï†ïÎ†¨ ÏôÑÎ£å: ${filters.sortBy} ${filters.sortOrder}`
    );
  }

  // üè¢ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù: usage Î∞è Ï∏µÌôïÏù∏ Ïª¨ÎüºÏùò Î™®Îì† unique Í∞íÎì§ ÌôïÏù∏ (ÎèôÏ†Å ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ±Ïö©)
  const usageValues =
    items.length > 0 ? [...new Set(items.map((item: any) => item.usage))] : [];
  const floorValues =
    items.length > 0
      ? [...new Set(items.map((item: any) => item.floor_confirmation))]
      : [];

  if (items.length > 0) {
    console.log("üîç [Debug] Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:", items[0]);
    console.log("üîç [Debug] usage Í∞í:", items[0].usage);
    console.log("üîç [Debug] sale_date Í∞í:", items[0].sale_date);
    console.log("üîç [Debug] sale_month Í∞í:", items[0].sale_month);
    console.log(
      "üîç [Debug] floor_confirmation Í∞í:",
      items[0].floor_confirmation
    );
    console.log(
      "üîç [Debug] elevator_available Í∞í:",
      items[0].elevator_available
    );

    console.log("üîç [Debug] usage Í≥†Ïú†Í∞íÎì§:", usageValues);
    console.log("üîç [Debug] floor_confirmation Í≥†Ïú†Í∞íÎì§:", floorValues);
    console.log(
      "üè¢ [Debug] ÎèôÏ†Å Í±¥Î¨º Ïú†Ìòï ÏòµÏÖò ÏÉùÏÑ±ÏùÑ ÏúÑÌïú usage Í∞íÎì§:",
      usageValues
    );
  }

  // üéØ ÌïµÏã¨ ÏàòÏ†ï: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ ÌõÑ Ï¥ù Í∞úÏàò Ïû¨Í≥ÑÏÇ∞ Î∞è ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
  let actualTotalCount = originalTotalCount;

  if (needsClientProcessing) {
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨Í∞Ä Ï†ÅÏö©Îêú Í≤ΩÏö∞, Ïã§Ï†ú Ï≤òÎ¶¨Îêú Í∞úÏàòÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
    actualTotalCount = items.length;
    console.log(
      `üîÑ [Client] ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ Ï†ÅÏö©Îê® - Ï¥ù Í∞úÏàò ÏóÖÎç∞Ïù¥Ìä∏: ${originalTotalCount} ‚Üí ${actualTotalCount}`
    );

    // üéØ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ ÌõÑ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ïû¨Ï†ÅÏö© (Ï†ÑÏó≠ Ï†ïÎ†¨ Î≥¥Ïû•)
    const pageSize = filters.size ?? 20;
    const currentPage = filters.page ?? 1;
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;

    console.log(
      `üìÑ [Pagination] ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ÅÏö©: ${currentPage}ÌéòÏù¥ÏßÄ (${
        startIndex + 1
      }-${Math.min(endIndex, items.length)}/${items.length})`
    );

    items = items.slice(startIndex, endIndex);
  }

  // üîç ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í¥ÄÎ†® ÏÑúÎ≤Ñ ÏùëÎãµ Î°úÍ∑∏
  console.log(
    `üîç [Debug] üìä ÏµúÏ¢Ö Í≤∞Í≥º: ${
      items.length
    }Í∞ú ÏïÑÏù¥ÌÖú, Ï¥ù ${actualTotalCount}Í∞ú Îç∞Ïù¥ÌÑ∞ ${
      needsClientProcessing ? "(ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï≤òÎ¶¨ Ï†ÅÏö©)" : "(ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞)"
    }`
  );

  return {
    items,
    isLoading,
    error,
    totalCount: actualTotalCount,
    usageValues, // üè¢ ÎèôÏ†Å Í±¥Î¨º Ïú†Ìòï ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ±Ïö©
    floorValues, // üè¢ ÎèôÏ†Å Ï∏µÌôïÏù∏ ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ±Ïö©
    refetch: () => {
      void mutate();
    },
    isRefreshing: isValidating,
  };
}
